#!/bin/sh

STAGED_GO_FILES=$(git diff --cached --name-only | grep ".go$")

if [[ "$STAGED_GO_FILES" = "" ]]; then
  exit 0
fi

GOLANGCI_LINT=$GOPATH/bin/golangci-lint
GOLINES=$GOPATH/bin/golines

# Check for golangci-lint
if [[ ! -x "$GOLANGCI_LINT" ]]; then
  printf "\t\033[41mPlease install golangci-lint (go install github.com/golangci/golangci-lint/cmd/golangci-lint)"
  exit 1
fi

# Check for golines
if [[ ! -x "$GOLINES" ]]; then
  printf "\t\033[41mPlease install golines (go install github.com/segmentio/golines@latest)"
  exit 1
fi

NORMAL=$(tput sgr0)
LIME_YELLOW=$(tput setaf 190)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)

printf "${LIME_YELLOW}Running go fmt on all staged *.go files...${NORMAL}\n"
go fmt ./...
if [[ $? != 0 ]]; then
  printf "${RED}Linting failed! ${NORMAL}Please fix errors before committing.\n"
  exit 1
else
 printf "${GREEN}Linting passed! ${NORMAL}Continuing to commit.\n"
fi
printf "${LIME_YELLOW}Running golines on all staged *.go files...${NORMAL}\n"
golines . -m 120 -w

if [[ $? != 0 ]]; then
  printf "${RED}Linting failed! ${NORMAL}Please fix errors before committing.\n"
  exit 1
else
 printf "${GREEN}Linting passed! ${NORMAL}Continuing to commit.\n"
fi

printf "${LIME_YELLOW}Running golangci-lint on all staged *.go files...${NORMAL}\n"
golangci-lint run

if [[ $? != 0 ]]; then
  printf "${RED}Linting failed! ${NORMAL}Please fix errors before committing.\n"
  exit 1
else
 printf "${GREEN}Linting passed! ${NORMAL}Continuing to commit.\n"
fi
